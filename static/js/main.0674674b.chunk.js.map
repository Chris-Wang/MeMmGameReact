{"version":3,"sources":["components/GameInstruction.js","components/GameCard.js","components/GamePlayGround.js","components/GameBoard.js","components/GameStats.js","components/GameTimer.js","App.js","index.js"],"names":["GameInstruction","className","GameCard","state","fliped","onflipChange","a","setState","props","onPickChange","tech","cardIndex","onPickCheck","setTimeout","renderCard","cardFlip","this","onClick","React","Component","GamePlayGround","pickTech","pickIndex","lastPickIndex","foundPairs","lock","index","onScoreChange","score","time","length","cards","alert","onGameChange","onPickIndexCheck","map","card","found","find","element","dataTech","PureComponent","Gameboard","renderContent","gameOn","style","gridTemplateColumns","GameStats","getButtonLabel","type","GameTimer","prevProps","countDown","setInterval","onTimeChange","clearInterval","width","gameCards","App","remainTime","sort","Math","random","data","GameBoard","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0674674b.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst GameInstruction = () => {\r\n  return (\r\n    <div className=\"game-instruction\">\r\n      <h3 className=\"game-instruction__header\">Instruction</h3>\r\n      <p className=\"game-instruction__content\">\r\n        - Click on the card to view the back face of the card. <br />\r\n        - Get two exact same card to score.\r\n        <br />- Score are based on the time and level. <br />- You only have 60s\r\n        for each level. <br />- There are three levels, '4x2', '4x4' and '6x6'.{\" \"}\r\n        <br />- Press 'Start Game' button when you are ready.\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GameInstruction;\r\n","import React from \"react\";\r\n\r\nclass GameCard extends React.Component {\r\n  state = { fliped: false };\r\n\r\n  onflipChange = async () => {\r\n    this.setState({ fliped: !this.state.fliped });\r\n    await this.props.onPickChange(this.props.tech, this.props.cardIndex);\r\n    const pickIndex = this.props.onPickCheck();\r\n    if (pickIndex !== this.props.cardIndex) {\r\n      setTimeout(() => {\r\n        this.setState({ fliped: !this.state.fliped });\r\n      }, 1000);\r\n    }\r\n  };\r\n\r\n  renderCard = () => {\r\n    if (this.props.cardFlip) {\r\n      return <div className=\"card__face card__face--back\"></div>;\r\n    } else {\r\n      return <div className=\"card__face card__face--front\"></div>;\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div\r\n        className={`card ${this.props.tech}`}\r\n        onClick={() =>\r\n          this.props.onPickChange(this.props.tech, this.props.cardIndex)\r\n        }\r\n      >\r\n        {this.renderCard()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default GameCard;\r\n","import React from \"react\";\r\nimport GameCard from \"./GameCard\";\r\n\r\nclass GamePlayGround extends React.PureComponent {\r\n  state = {\r\n    pickTech: \"\",\r\n    pickIndex: -1,\r\n    lastPickIndex: -1,\r\n    foundPairs: [],\r\n    lock: false,\r\n  };\r\n\r\n  onPickChange = async (tech, index) => {\r\n    if (!this.state.lock) {\r\n      //first time pick a card\r\n      if (this.state.pickTech === \"\") {\r\n        this.setState({\r\n          pickTech: tech,\r\n          pickIndex: index,\r\n          lastPickIndex: index,\r\n        }); //second time pick a card\r\n      } else {\r\n        //when the second pick is not the same card\r\n        if (this.state.lastPickIndex !== index) {\r\n          //display the card, set pickindex\r\n          this.setState({ pickIndex: index });\r\n          //check if it's valid pair\r\n          if (this.state.pickTech === tech) {\r\n            await this.setState({\r\n              foundPairs: [\r\n                ...this.state.foundPairs,\r\n                ...[this.state.lastPickIndex, index],\r\n              ],\r\n            });\r\n            this.props.onScoreChange(this.props.score + this.props.time);\r\n\r\n            this.setState({ pickTech: \"\", pickIndex: -1, lastPickIndex: -1 });\r\n            //if all pairs were found, pop up alert, and end the game\r\n            if (this.state.foundPairs.length === this.props.cards.length) {\r\n              setTimeout(() => {\r\n                alert(`Congratulations, your score is ${this.props.score}`);\r\n                this.props.onGameChange();\r\n              }, 100);\r\n            } //if it's not a valid pair\r\n          } else {\r\n            this.setState({ lock: true });\r\n            setTimeout(() => {\r\n              this.setState({\r\n                lock: false,\r\n                pickTech: \"\",\r\n                pickIndex: -1,\r\n                lastPickIndex: -1,\r\n              });\r\n            }, 1500);\r\n          } //when the second pick is the same card\r\n        } else {\r\n          this.setState({ pickTech: \"\", pickIndex: -1, lastPickIndex: -1 });\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  onPickIndexCheck = () => {\r\n    return this.state.pickIndex;\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        {this.props.cards.map((card, index) => {\r\n          const found = this.state.foundPairs.find(\r\n            (element) => element === index\r\n          );\r\n          const flip = () => {\r\n            if (\r\n              index === this.state.pickIndex ||\r\n              index === this.state.lastPickIndex ||\r\n              found ||\r\n              found === 0\r\n            ) {\r\n              return true;\r\n            } else {\r\n              return false;\r\n            }\r\n          };\r\n\r\n          const cardFlip = flip();\r\n\r\n          return (\r\n            <GameCard\r\n              key={index}\r\n              tech={card.dataTech}\r\n              cardIndex={index}\r\n              cardFlip={cardFlip}\r\n              onPickChange={this.onPickChange}\r\n              onPickCheck={this.onPickIndexCheck}\r\n            ></GameCard>\r\n          );\r\n        })}\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default GamePlayGround;\r\n","import React from \"react\";\r\nimport GameInstruction from \"./GameInstruction\";\r\nimport GamePlayGround from \"./GamePlayGround\";\r\n\r\nclass Gameboard extends React.Component {\r\n  renderContent = () => {\r\n    if (this.props.gameOn) {\r\n      return (\r\n        <div\r\n          className=\"game-board\"\r\n          style={{ gridTemplateColumns: \"1fr 1fr 1fr 1fr\" }}\r\n        >\r\n          <GamePlayGround\r\n            score={this.props.score}\r\n            time={this.props.time}\r\n            cards={this.props.cards}\r\n            onScoreChange={this.props.onScoreChange}\r\n            onGameChange={this.props.onGameChange}\r\n          />\r\n        </div>\r\n      );\r\n    } else {\r\n      return (\r\n        <div className=\"game-board\">\r\n          <GameInstruction />\r\n        </div>\r\n      );\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return <>{this.renderContent()}</>;\r\n  }\r\n}\r\n\r\nexport default Gameboard;\r\n","import React from \"react\";\r\n\r\nclass GameStats extends React.Component {\r\n  getButtonLabel = () => {\r\n    return this.props.gameOn ? \"End Game\" : \"New Game\";\r\n  };\r\n  render() {\r\n    return (\r\n      <div className=\"game-stats\">\r\n        <div className=\"game-stats__level\">\r\n          <div className=\"game-stats__level--label\">Current Level:</div>\r\n          <div className=\"game-stats__level--value\">1</div>\r\n        </div>\r\n        <div className=\"game-stats__score\">\r\n          <div className=\"game-stats__score--label\">Score:</div>\r\n          <div className=\"game-stats__score--value\">{this.props.score}</div>\r\n        </div>\r\n        <button\r\n          className=\"game-stats__button\"\r\n          type=\"button\"\r\n          onClick={this.props.onGameChange}\r\n        >\r\n          {this.getButtonLabel()}\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default GameStats;\r\n","import React from \"react\";\r\n\r\nclass GameTimer extends React.Component {\r\n  state = { time: 60 };\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if (prevProps.gameOn !== this.props.gameOn) {\r\n      if (this.props.gameOn) {\r\n        var countDown = setInterval(() => {\r\n          if (this.props.gameOn && this.state.time > 0) {\r\n            this.setState({ time: this.state.time - 1 });\r\n            this.props.onTimeChange(this.state.time);\r\n          } else {\r\n            clearInterval(countDown);\r\n            if (this.state.time === 0) {\r\n              alert(`Congratulations, your score is ${this.props.score}`);\r\n              this.props.onGameChange();\r\n            }\r\n          }\r\n        }, 1000);\r\n      } else {\r\n        this.setState({ time: 60 });\r\n        this.props.onTimeChange(this.state.time);\r\n        alert(`Congratulations, your score is ${this.props.score}`);\r\n      }\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"game-timer\">\r\n        <div\r\n          className=\"game-timer__bar\"\r\n          style={{ width: `${(this.state.time / 60) * 100}%` }}\r\n        >\r\n          {this.state.time}s\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default GameTimer;\r\n","import React from \"react\";\nimport GameBoard from \"./components/GameBoard\";\nimport GameStats from \"./components/GameStats\";\nimport GameTimer from \"./components/GameTimer\";\n\nconst gameCards = [\n  { dataTech: \"css3\" },\n  { dataTech: \"css3\" },\n  { dataTech: \"html5\" },\n  { dataTech: \"html5\" },\n  { dataTech: \"js\" },\n  { dataTech: \"js\" },\n  { dataTech: \"react\" },\n  { dataTech: \"react\" },\n];\nclass App extends React.Component {\n  state = { gameOn: false, score: 0, remainTime: 60, cards: gameCards };\n\n  onGameChange = async () => {\n    await this.setState({ gameOn: !this.state.gameOn });\n    gameCards.sort(function () {\n      return Math.random() - 0.5;\n    });\n    if (this.state.gameOn) {\n      this.setState({ score: 0, cards: gameCards });\n    }\n  };\n\n  onScoreChange = (data) => {\n    this.setState({ score: data });\n  };\n\n  onTimeChange = (data) => {\n    this.setState({ remainTime: data });\n  };\n\n  render() {\n    return (\n      <>\n        <h1 className=\"game-title\">The classic MeMmmm Game</h1>\n        <GameStats\n          onGameChange={this.onGameChange}\n          gameOn={this.state.gameOn}\n          score={this.state.score}\n        />\n        <GameTimer\n          gameOn={this.state.gameOn}\n          score={this.state.score}\n          onGameChange={this.onGameChange}\n          onTimeChange={this.onTimeChange}\n        />\n        <GameBoard\n          gameOn={this.state.gameOn}\n          cards={this.state.cards}\n          score={this.state.score}\n          time={this.state.remainTime}\n          onScoreChange={this.onScoreChange}\n          onGameChange={this.onGameChange}\n        />\n      </>\n    );\n  }\n}\n\nexport default App;\n","import \"./css/main.css\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}